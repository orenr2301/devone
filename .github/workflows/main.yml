name: 'Terraform deploy'

on:
  push:
    branches:
    - main
    paths: 
    - alb/**
    - ec2/**
    - ecr/**
    - node-app/**
    - pyy-app/**
  pull_request:
    branches:
    - main
    paths: 
    - alb/**
    - ec2/**
    - ecr/**
    - node-app/**
    - pyy-app/**

permissions:
     contents: read
     pull-requests: write
    
jobs:
  terraform-ecr-s3:
   name: "ecr/s3"
   runs-on: ubuntu-latest
   defaults:
      run:
       shell: bash
       
   steps:
  # Checkout the repository to the GitHub Actions runner
   - name: Checkout
     uses: actions/checkout@v3
     
     
   - name: Install Terraform 
     uses: hashicorp/setup-terraform@v2
     with:
      cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
   
   - name:  Terraorm ecr/s3 init
     id: init
     working-directory: ./ecr
     run: terraform init
     
   - name: Terraform ecr/s3 plan
     id: plan 
     working-directory: ./ecr
     run: terraform plan -input=false
  
   - name: Terraform apply
     id: apply
     working-directory: ./ecr
     run: terraform apply -auto-approve -input=false

 
  build-image:
    name: "build and push"
    runs-on: ubuntu-latest
    needs: terraform-ecr-s3
    
    steps:
    
    - name: Checkout build
      uses: actions/checkout@v3
      
      
    - name: Configs AWS crdentails 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: eu-central-1
    
    - name: login to ecr
      id: login-ecr 
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Tag abd push images to Amazon ECR 
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devone
        IMAGE_TAG_JS: octo-nodejs
      working-directory: ./node-app
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_JS .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_JS
  
  change-content:
    name: deploy to s3
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: build-image

    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configs AWS crdentails 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: eu-central-1
    
    - name: login to ecr
      id: login-ecr 
      uses: aws-actions/amazon-ecr-login@v1

    - name: changing image names in docker-compose
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devone
        IMAGE_TAG_JS: octo-nodejs
      working-directory: ./node-app/compose-app
      run: |
        sed -i  "0,/image:/ s/image:.*/image: $ECR_REGISTRY\/$ECR_REPOSITORY:$IMAGE_TAG_JS/" docker-compose.yaml
        aws s3 cp docker-compose.yaml s3://octo-oren-bucket
        aws s3 cp mongo-init.js s3://octo-oren-bucket
            
        
  ec2:
    name: deploy ec2 instance
    runs-on: ubuntu-latest
    needs: change-content

    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
         
         
    - name: Install Terraform 
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name:  Terraorm ec2 init
      id: init
      working-directory: ./ec2
      run: terraform init

    - name: Terraform ec2 plan
      id: plan 
      working-directory: ./ec2
      run: terraform plan -input=false
  
    - name: Terraform ec2 Apply  
      id: apply 
      working-directory: ./ec2
      run: terraform apply -auto-approve -input=false
  
  alb:
    name: deploy alb
    runs-on: ubuntu-latest
    needs: ec2

    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Terraform 
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    - name:  Terraorm alb init
      id: init
      working-directory: ./alb
      run: terraform init

    - name: Terraform alb plan
      id: plan 
      working-directory: ./alb
      run: terraform plan -input=false
  
    - name: Terraform alb Apply  
      id: apply 
      working-directory: ./alb
      run: terraform apply -auto-approve -input=false

 
  sleep:
    name: sleeping
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: alb
    
    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: sleeping before destruction
      run: sleep 600       


 